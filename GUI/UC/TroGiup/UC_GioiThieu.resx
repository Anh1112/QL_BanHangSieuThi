<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblThongKe.Text" xml:space="preserve">
    <value>Thống kê số lượng hàng hóa có trong kho, lưu lượng nhập hàng và mức tiêu thụ trong siêu thị.
- Mục hàng hóa trong kho : Đưa ra biểu đồ cùng danh sách số lượng cùng thông tin của tất cả các hàng hóa
có trong kho
- Mục lưu lượng nhập hàng : Đưa ra biểu đồ cùng danh sách số lượng hàng hóa đã được nhập trong khoảng 
thời gian được chọn
- Mục mức tiêu thụ  : Đưa ra biểu đồ cùng danh sách số lượng hàng hóa đã bán được trong khoảng thời gian 
được chọn.</value>
  </data>
  <data name="lblQLNS.Text" xml:space="preserve">
    <value>Quản lí nhân viên cùng khách hàng của siêu thị
- Mục nhân viên bao gồm thêm, sửa, xóa thông tin của nhân viên.
Đưa ra danh sách thông tin của nhân viên.
- Mục khách hàng bao gồm thêm, sửa, xóa thông tin của khách hàng. 
Cập nhật thông tin của khách hàng được thêm mới tại mục QLBH.
Đưa ra danh sách thông tin của khách hàng</value>
  </data>
  <data name="lblQLBH.Text" xml:space="preserve">
    <value>Quản lí quá trình bán hàng trong siêu thị.
* Thêm hóa đơn
Nhân viên bán hàng cần thực hiện như sau :
- Vào mục QLBH ( Quản lí bán hàng )
- Chọn Thêm hóa đơn.
Tại đây nhân viên yêu cầu khách hàng cung cấp mã khách hàng mà khách hàng đã có.
Nếu khách hàng chưa có mã thì thêm mới thông tin khách hàng.
- Di chuyển sang mục Thêm hàng hóa.
Tại đây nhân viên tìm kiếm hàng hóa và số lượng mà khách hàng yêu cầu và thêm vào hóa đơn.
- Kết thúc nhấn Thêm hóa đơn.
* Khi được khách hàng yêu cầu sửa hóa đơn, Nhân viên cần thực hiện như sau :
- Vào mục Xem hóa đơn.
- Chọn ngày tháng muốn xem hóa đơn.
- Chọn hóa đơn của khách hàng.
- Chọn sửa và xác nhận</value>
  </data>
  <data name="lblQLNH.Text" xml:space="preserve">
    <value>Quản lí việc nhập thêm hàng hóa vào kho cho siêu thị.
Nhân viên nhập kho cần thực hiện như sau :
- Vào mục QLNH ( Quản lí nhập hàng )
- Chọn Thêm tại phần Nhập Kho để thêm phiếu nhập kho.
- Chọn phiếu nhập kho vừa tạo mới và chuyển sang phần Chi tiết nhập kho
để lựa chọn thông tin và số lượng các mặt hàng cần nhập.
 + Khi hàng hóa cần nhập chưa hề có thông tin trong kho, cần vào Quản lí hàng hóa 
để thêm mới hàng hóa và quay lại QLNH tiếp tục thao tác.</value>
  </data>
  <data name="lblQLHH.Text" xml:space="preserve">
    <value>Bao gồm quản lí hàng hóa trong siêu thị và quản lí quầy hàng. 
- Mục hàng hóa có vai trò thêm, sửa, xóa thông tin một mặt hàng bất kì có trong siêu thị.
Đưa ra thông tin của các mặt hàng.
Mục quầy hàng có vai trò thêm, sửa, xóa thông tin một quầy hàng bất kì có trong siêu thị.
Đưa ra thông tin của các quầy hàng
</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>LHAProject là phần mềm ứng dụng hỗ trợ quản lý bán hàng trong siêu thị, quản lý nhân lực,
quản lý kho hàng cho các đơn vị hoạt động kinh doanh trong lĩnh vực thương mại và dịch vụ. 
Phần mềm giúp nắm bắt thông tin về lượng hàng trong kho, theo dõi lưu lượng bán ra, 
thanh toán nhanh cho khách hàng để giải phóng hàng đợi thanh toán, bán hàng chính xác giá ,
không nhầm lẫn giá cả, quản lý nhân viên từ xa khi không có mặt tại cửa hàng, nâng cao hình ảnh thương hiệu của shop,… 
LHAProject có thể áp dụng đối với những cửa hàng, minimart hay siêu thị quy mô đơn lẻ hoặc mô hình chuỗi cửa hàng.</value>
  </data>
</root>